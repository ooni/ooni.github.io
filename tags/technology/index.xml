<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>technology on OONI: Open Observatory of Network Interference</title><link>https://ooni.org/tags/technology/</link><description>Recent content in technology on OONI: Open Observatory of Network Interference</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 Feb 2019 01:00:00 +0000</lastBuildDate><atom:link href="https://ooni.org/tags/technology/index.xml" rel="self" type="application/rss+xml"/><item><title>OONI Software Development Guidelines</title><link>https://ooni.org/post/ooni-software-development-guidelines/</link><pubDate>Sat, 23 Feb 2019 01:00:00 +0000</pubDate><guid>https://ooni.org/post/ooni-software-development-guidelines/</guid><description>The goal of this document is to explain and explicit some of the best practices relevant to software development that we follow at the Open Observatory of Network Interference (OONI).
By following these development guidelines we aim to produce higher quality code, which contains less defects and allows us to iterate more quickly delivering greater value to our end users is a shorter amount of time!
Version control Also known as: â€œHow I Learned to Stop Worrying and Love the Git!</description></item><item><title>Iran Protests: DPI blocking of Instagram (Part 2)</title><link>https://ooni.org/post/2018-iran-protests-pt2/</link><pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate><guid>https://ooni.org/post/2018-iran-protests-pt2/</guid><description>In early January 2018, OONI published a post reporting on the blocking of Telegram and Instagram amidst protests in Iran. We have since been analyzing RIPE data and other network measurements collected from Iran in an attempt to better understand the blockages. Upon further analysis, we found that Instagram was in fact blocked (during the Iran protests) through the use of Deep Packet Inspection (DPI) technology which targeted the TLS protocol.</description></item><item><title>I have hands, how can I mine OONI data?</title><link>https://ooni.org/post/mining-ooni-data/</link><pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate><guid>https://ooni.org/post/mining-ooni-data/</guid><description>OONI Explorer and the OONI API provide access to the data OONI gathers. As these tools currently present some limitations, we publish this post to share other options for researchers interested in digging through OONI data. These options are either currently available or can be made available upon request.
There is another important caveat: The data uploaded by OONI Probes is made available in daily batches, so it may take up to 48 hours for the measurements to become available in OONI Explorer, OONI API and other sources of OONI data.</description></item><item><title>Writing a modern cross-platform desktop app</title><link>https://ooni.org/post/writing-a-modern-cross-platform-desktop-app/</link><pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate><guid>https://ooni.org/post/writing-a-modern-cross-platform-desktop-app/</guid><description>The goal of this article is to outline some of the architecture &amp;amp; design considerations made while thinking about how we would implement the OONI Probe desktop apps. This is the result of research and experimentation with a variety of different libraries and approaches. For each part of the technical stack we will outline the rationale leading to our choices.
Requirements &amp;amp; design goals Our primary goal with the OONI Probe desktop apps is to enable Windows and macOS desktop users to run OONI Probe network measurement tests without knowledge of the command line.</description></item></channel></rss>