<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Engineering on OONI: Open Observatory of Network Interference</title><link>https://ooni.github.io/tags/software-engineering/</link><description>Recent content in Software Engineering on OONI: Open Observatory of Network Interference</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 23 Feb 2019 01:00:00 +0000</lastBuildDate><atom:link href="https://ooni.github.io/tags/software-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>OONI Software Development Guidelines</title><link>https://ooni.github.io/post/ooni-software-development-guidelines/</link><pubDate>Sat, 23 Feb 2019 01:00:00 +0000</pubDate><guid>https://ooni.github.io/post/ooni-software-development-guidelines/</guid><description>&lt;p>&lt;img src="https://ooni.github.io/post/ooni-software-development-guidelines/QuattroEngineer.png">&lt;/p>
&lt;p>The goal of this document is to explain and explicit some of the best practices relevant to software development that we follow at the Open Observatory of Network Interference (OONI).&lt;/p>
&lt;p>By following these development guidelines we aim to produce &lt;strong>higher quality code&lt;/strong>, which contains &lt;strong>less defects&lt;/strong> and allows us to iterate more quickly &lt;strong>delivering greater value&lt;/strong> to our end &lt;strong>users is a shorter amount of time&lt;/strong>!&lt;/p>
&lt;h2 id="version-control">Version control&lt;/h2>
&lt;p>Also known as: “How I Learned to Stop Worrying and Love the &lt;strong>Git&lt;/strong>!”&lt;/p></description></item><item><title>Writing a modern cross-platform desktop app</title><link>https://ooni.github.io/post/writing-a-modern-cross-platform-desktop-app/</link><pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate><guid>https://ooni.github.io/post/writing-a-modern-cross-platform-desktop-app/</guid><description>&lt;p>The goal of this article is to outline some of the architecture &amp;amp; design considerations made while thinking about how we would implement the OONI Probe desktop apps. This is the result of research and experimentation with a variety of different libraries and approaches. For each part of the technical stack we will outline the rationale leading to our choices.&lt;/p>
&lt;h1 id="requirements--design-goals">Requirements &amp;amp; design goals&lt;/h1>
&lt;p>Our primary goal with the OONI Probe desktop apps is to enable &lt;strong>Windows&lt;/strong> and &lt;strong>macOS&lt;/strong> desktop users to run &lt;a href="https://github.com/TheTorProject/ooni-probe">OONI Probe&lt;/a> network measurement tests without knowledge of the command line. These tests will use the &lt;strong>&lt;a href="https://github.com/measurement-kit">Measurement Kit&lt;/a>&lt;/strong> implementation of OONI tests.&lt;/p></description></item></channel></rss>